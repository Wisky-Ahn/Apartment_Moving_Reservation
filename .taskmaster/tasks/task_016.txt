# Task ID: 16
# Title: 백엔드 JWT 인증 미들웨어 수정
# Status: done
# Dependencies: 7
# Priority: high
# Description: NextAuth에서 생성한 JWT 토큰을 백엔드에서 인증 실패로 처리하는 문제를 해결하여 관리자 API 접근 시 발생하는 403 에러를 수정합니다.
# Details:
이 작업은 다음 단계로 진행됩니다:

1. 현재 문제 분석:
   - 시스템관리자(superadmin) 로그인은 성공하지만 관리자 API 호출 시 403 에러 발생
   - NextAuth에서 생성된 JWT 토큰과 백엔드 인증 시스템 간 불일치 확인
   - 현재 Authorization 헤더 처리 방식 검토

2. JWT 토큰 구조 분석:
   - NextAuth에서 생성하는 JWT 토큰의 페이로드 구조 분석 (claims, 만료 시간, 사용자 정보 등)
   - 백엔드에서 기대하는 JWT 토큰 구조와 비교
   - 토큰 검증 로직에서 불일치 부분 식별

3. 백엔드 미들웨어 수정:
   - JWT 토큰 파싱 로직 수정 (NextAuth 토큰 구조에 맞게 조정)
   - Authorization 헤더 처리 로직 검토 및 수정 (Bearer 토큰 추출 방식 등)
   - 권한 검증 미들웨어 업데이트 (role 확인 로직 등)
   - 필요시 토큰 변환 로직 추가 (NextAuth 토큰 → 백엔드 기대 형식)

4. 환경 변수 및 설정 확인:
   - JWT 시크릿 키가 프론트엔드와 백엔드에서 일치하는지 확인
   - 토큰 서명 알고리즘 확인 (HS256, RS256 등)
   - 토큰 만료 시간 설정 검토

5. 에러 처리 개선:
   - 인증 실패 시 더 명확한 에러 메시지 제공
   - 로깅 추가하여 디버깅 용이성 향상

코드 수정 예시:
```python
# 기존 JWT 검증 미들웨어
@app.middleware("http")
async def authenticate_user(request: Request, call_next):
    # 수정 전: 단순 토큰 검증
    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("Bearer "):
        return JSONResponse(status_code=403, content={"detail": "Not authenticated"})
    
    # 수정 후: NextAuth 토큰 구조 고려
    try:
        token = auth_header.replace("Bearer ", "")
        # NextAuth 토큰 구조에 맞게 페이로드 추출 및 검증
        payload = jwt.decode(
            token, 
            settings.JWT_SECRET_KEY,
            algorithms=[settings.JWT_ALGORITHM],
            options={"verify_signature": True}
        )
        
        # NextAuth 특정 필드 처리 (예: 사용자 역할)
        if "role" not in payload or payload["role"] != "superadmin":
            return JSONResponse(status_code=403, content={"detail": "Insufficient permissions"})
            
        # 요청 객체에 사용자 정보 추가
        request.state.user = payload
        
    except jwt.PyJWTError as e:
        # 상세 에러 로깅
        logger.error(f"JWT validation error: {str(e)}")
        return JSONResponse(status_code=403, content={"detail": f"Authentication failed: {str(e)}"})
        
    return await call_next(request)
```

# Test Strategy:
1. 단위 테스트:
   - JWT 토큰 파싱 함수 테스트: NextAuth에서 생성된 실제 토큰으로 테스트
   - 권한 검증 로직 테스트: 다양한 역할(superadmin, admin, user)에 대한 테스트
   - 에러 처리 테스트: 잘못된 토큰, 만료된 토큰, 서명 불일치 등의 케이스

2. 통합 테스트:
   - 실제 NextAuth 로그인 후 발급된 토큰으로 백엔드 API 호출 테스트
   - 관리자 대시보드에서 모든 관리자 API 엔드포인트 호출 테스트
   - 권한별 API 접근 제한 테스트

3. 수동 테스트:
   - 시스템관리자(superadmin) 계정으로 로그인 후 모든 관리자 기능 테스트
   - 브라우저 개발자 도구에서 네트워크 탭을 통해 API 요청 및 응답 확인
   - 로컬 스토리지에 저장된 토큰 구조 분석

4. 테스트 시나리오:
   - 로그인 → 토큰 발급 → 관리자 API 호출 → 성공적인 응답 확인
   - 토큰 만료 후 API 호출 → 적절한 에러 응답 확인
   - 권한이 없는 사용자의 관리자 API 호출 → 403 에러 확인

5. 성공 기준:
   - 시스템관리자(superadmin) 로그인 후 모든 관리자 API에 성공적으로 접근 가능
   - 403 에러가 더 이상 발생하지 않음
   - 로그아웃 후 API 접근 시 적절한 인증 오류 발생
